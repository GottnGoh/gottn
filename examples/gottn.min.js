let Gottn=function(blueprint){const _DEBUG=!1;if("object"!=typeof blueprint||null==blueprint)throw new Error("TypeError: Gottn argument type is wrong.");if("name"in blueprint){if("string"!=typeof blueprint.name)throw new Error("TypeError: The type of member name of blueprint is not a string.")}else blueprint.name="";if("data"in blueprint){if("object"!=typeof blueprint.data)throw new Error("TypeError: The type of member data of blueprint is not an object.")}else blueprint.data={};if("contractor"in blueprint){if("function"!=typeof blueprint.contractor)throw new Error("TypeError: The type of member contractor of blueprint is not a function.")}else blueprint.contractor=function(){};if("render"in blueprint){if("function"!=typeof blueprint.render)throw new Error("TypeError: The type of member render of blueprint is not a function.")}else blueprint.render=function(){return"<span></span>"};if("rendered"in blueprint){if("function"!=typeof blueprint.rendered)throw new Error("TypeError: The type of member rendered of blueprint is not a function.")}else blueprint.rendered=function(){};let id=(blueprint.name?blueprint.name+"-":"")+_uuid4(),data={...blueprint.data},html="",on_name_list=[];for(key in document.createElement("div"))key.match(/^on/)&&on_name_list.push(key);function _uuid4(){for(var uuid4="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".split(""),index=0,length=uuid4.length;index<length;index++)switch(uuid4[index]){case"x":uuid4[index]=Math.floor(16*Math.random()).toString(16);break;case"y":uuid4[index]=(Math.floor(4*Math.random())+8).toString(16)}return uuid4.join("")}function store(new_data){if(new_data)for(var key in data)key in new_data&&(data[key]=new_data[key]);return this}function render(element){html=blueprint.render.call(this),html=html.trim().replace(/^(<[a-zA-Z]+)/,`$1 data-gottn-id="${id}"`);let is_embedded=!1;if(null===element)throw new Error("TypeError: Cannot read an element.");if("string"==typeof element&&"here"===element.toLowerCase())is_embedded=!0,(element=document.createElement("template")).innerHTML=html,document.body.insertBefore(element,document.body.firstElementChild),element=elementSelector(`[data-gottn-id="${id}"]`);else{if(!element&&!(element=document.querySelector(`[data-gottn-id="${id}"]`)))throw new Error("No element: Check the arguments of render.");element.outerHTML=html,element=document.querySelector(`[data-gottn-id="${id}"]`)}let event_element_list=Array.from(element.querySelectorAll("[data-gottn-event]"));if(element.getAttribute("data-gottn-event")&&event_element_list.push(element),event_element_list.forEach(event_element=>{let[gottn_id,on_name,function_name]=event_element.getAttribute("data-gottn-event").split(" ",3);if(gottn_id==id){if(!blueprint[function_name])throw new Error(`"${function_name}" is not defined in "${blueprint.name||"blueprint"}"`);event_element[on_name]=blueprint[function_name].bind(this)}}),this.rendered(),is_embedded)return`<template data-location-element-gottn-id="${id}"></template>`;for(;;){let location_element_list=Array.from(element.querySelectorAll("[data-location-element-gottn-id]"));if(0==location_element_list.length)break;location_element_list.forEach(location_element=>{let location_gottn_id,entity_template=templateSelector(`[data-gottn-id="${location_element.getAttribute("data-location-element-gottn-id")}"]`);location_element.parentNode.replaceChild(entity_template.content.firstElementChild,location_element),entity_template.remove()})}return this}function element(){return elementSelector(`[data-gottn-id="${id}"]`)}function elementSelector(query){let element=document.querySelector(query);return element||(template=templateSelector(query),"content"in template&&(element=template.content.firstElementChild)),element}function templateSelector(query){return Array.from(document.querySelectorAll("template")).find(documentFragment=>documentFragment.content.querySelector(query))}let gottn={get id(){return id},get name(){return blueprint.name},get data(){return data},get html(){return html},get rendered(){return blueprint.rendered},get element(){return element()},store:store,render:render};for(let function_name in blueprint)function_name.match(/^\$.*/)&&"function"==typeof blueprint[function_name]&&(gottn[function_name]=blueprint[function_name].bind(gottn));return on_name_list.forEach((function(on_name){gottn[on_name]=function(function_name){return`data-gottn-event="${gottn.id} ${on_name} ${function_name}"`}})),blueprint.contractor.call(gottn),gottn};